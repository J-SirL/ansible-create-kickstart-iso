# code: language=ansible
---
- name: Ensure Valid kickstart Configuration Type
  ansible.builtin.assert:
    that:
      - kickstart_type in ['server', 'workstation', 'laptopone']
    fail_msg: "'kickstart_type' must be set to server, workstation, or laptopone but is currently set to {{ kickstart_type }}"
    success_msg: "'kickstart_type' is set to {{ kickstart_type }}"

- name: Install required packages
  yum:
    name:
      - genisoimage
      - isomd5sum
      - rsync  # ensure rsync is installed for the synchronize module
    state: present

- name: Create working directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - /mnt/iso
    - "{{ ks_working_directory }}"

- name: Mount the original ISO
  ansible.posix.mount:
    src: "{{ ks_original_iso_path }}"
    path: /mnt/iso
    fstype: iso9660
    opts: loop
    state: mounted

- name: Synchronize ISO contents to working directory
  ansible.posix.synchronize:
    src: /mnt/iso/
    dest: "{{ ks_working_directory }}"
    recursive: yes

- name: Unmount the ISO
  ansible.posix.mount:
    path: /mnt/iso
    state: unmounted

- name: Determine the correct Kickstart file path and ISO file name
  set_fact:
    ks_kickstart_file_path: "{{ kickstart_configurations[kickstart_choices[kickstart_type|int - 1]].file_path }}"
    ks_iso_file: "{{ kickstart_configurations[kickstart_choices[kickstart_type|int - 1]].iso_file }}"

- name: Place the Kickstart file in the working directory
  ansible.builtin.template:
    src: "{{ ks_kickstart_file_path }}"
    dest: "{{ ks_working_directory }}/ks.cfg"
    mode: '0644'

- name: Update isolinux.cfg to include Kickstart file
  ansible.builtin.template:
    src: isolinux.cfg.j2
    dest: "{{ ks_working_directory }}/isolinux/isolinux.cfg"
    mode: '0644'

- name: Update grub.cfg to include Kickstart file
  ansible.builtin.template:
    src: grub.cfg.j2
    dest: "{{ ks_working_directory }}/EFI/BOOT/grub.cfg"
    mode: '0644'

- name: Recreate the ISO
  command: >
    genisoimage -r -v -T -J -joliet-long -V "AlmaLinux-9-Modified"
    -volset "AlmaLinux-9-Modified" -A "AlmaLinux-9-Modified"
    -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot
    -boot-load-size 4 -boot-info-table -x "lost+found"
    -input-charset utf-8
    -o "{{ ks_new_iso_path }}{{ ks_iso_file }}" "{{ ks_working_directory }}/"
  register: genisoimage_output
  changed_when: "'extents written' in genisoimage_output.stderr"

- name: Add MD5 checksum to the new ISO
  command: implantisomd5 "{{ ks_new_iso_path }}{{ ks_iso_file }}"
  when: genisoimage_output is changed
  register: md5_output # noqa: no-handler

- name: Extract MD5 checksum
  set_fact:
    md5_checksum: "{{ md5_output.stdout | regex_search('md5 = (\\b[a-fA-F0-9]{32}\\b)', '\\1') | first }}"
  when: md5_output.stdout is defined and md5_output.stdout|length > 0

- name: Debug  MD5 checksum
  debug:
    var: md5_checksum

- name: Save MD5 checksum to a file
  copy:
    content: "{{ md5_checksum }}"
    dest: "{{ ks_new_iso_path }}md5_checksum_file.txt"
    mode: '0644'
  when: md5_checksum is defined

- name: Cleanup working directory
  file:
    path: "{{ ks_working_directory }}"
    state: absent
  no_log: true
  changed_when: false
